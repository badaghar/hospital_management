datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  // binaryTargets = "native"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

// Define your own datamodels here and run `yarn redwood prisma migrate dev`
// to create migrations for them and apply to your dev DB.

model File {
  id    Int    @id @default(autoincrement())
  title String
  url   String
  ipd   Ipd    @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ipdId Int
}

model Complaints {
  id         Int      @id @default(autoincrement())
  note       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  ipd        Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  ipdId Int
}

model Patient {
  id             Int              @id @default(autoincrement())
  name           String
  age            Int
  phone_no       String?
  gender         String?
  address        String?
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  Ipd            Ipd[]
  SaleMedicine   SaleMedicine[]
  ReturnMedicine ReturnMedicine[]
  Opd            Opd[]
  extra          Json?
}

// delete
model Opd {
  id                Int      @id @default(autoincrement())
  consultant_doctor String
  charges           Json
  paymentMode       String
  amount            Float
  patient           Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  patientId         Int
  extra             Json?
}

model Ipd {
  id                  Int                   @id @default(autoincrement())
  patient             Patient               @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patientId           Int
  consultant_doctor   String
  date_of_admission   DateTime
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  paid_amount         Float
  discharge_date      DateTime?
  patientType         String
  IpdCharges          IpdCharges[]
  IpdConsultation     IpdConsultation[]
  IpdPayment          IpdPayment[]
  Bed                 Bed[]
  IpdLabCharges       IpdLabCharges[]
  IpdOperationPayment IpdOperationPayment[]
  IpdChat             IpdChat[]
  IpdSummary          IpdSummary[]
  extra               Json?
  IpdPrescription     IpdPrescription[]
  IpdHomoPrescription IpdHomoPrescription[]

  File       File[]
  Complaints Complaints[]
}

model IpdChat {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  ipd        Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId      Int
  date       DateTime
  drug       String
  dose       String
  route      String
  updated_at DateTime @updatedAt
  extra      Json?
}

model IpdSummary {
  id         Int      @id @default(autoincrement())
  ipd        Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId      Int
  summary    Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model IpdOperationPayment {
  id             Int      @id @default(autoincrement())
  operation_name String
  amount         Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  ipd            Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId          Int
  extra          Json?
}

// model Operation {
//   id                Int      @id @default(autoincrement())
//   operation_name    String
//   date              DateTime
//   consultant_doctor String
//   remark            String
//   result            String
//   created_at        DateTime @default(now())
//   updated_at        DateTime @updatedAt
//   ipd               Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   ipdId             Int
// }

model IpdCharges {
  id          Int      @id @default(autoincrement())
  charge_type String
  charge      Float
  quantity    Int
  total       Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  ipd         Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId       Int
  extra       Json?
}

model IpdConsultation {
  id                  Int      @id @default(autoincrement())
  consultation_doctor String
  consultation_type   String
  amount              Float
  ipd                 Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId               Int
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  extra               Json?
}

model IpdLabCharges {
  id         Int      @id @default(autoincrement())
  lab_name   String
  ipd        Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId      Int
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model IpdPayment {
  id           Int      @id @default(autoincrement())
  amount       Float
  payment_mode String
  ipd          Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId        Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  extra        Json?
}

model IpdPrescription {
  id              Int      @id @default(autoincrement())
  ipd             Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId           Int
  medicine        String
  dosage          String
  timing          String
  frequency       String
  duration        String
  note            String?
  quantity        Int
  medicine_detail Medicine @relation(fields: [medicineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  extra           Json?
  medicineId      Int
}

model IpdHomoPrescription {
  id         Int      @id @default(autoincrement())
  ipd        Ipd      @relation(fields: [ipdId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ipdId      Int
  medicine   String
  dosage     String
  timing     String
  frequency  String
  duration   String
  note       String?
  rate       Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model Floor {
  id         Int      @id @default(autoincrement())
  floor_name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Bed        Bed[]
  extra      Json?

  @@unique([floor_name])
}

model Bed {
  id         Int      @id @default(autoincrement())
  bed_name   String
  floor      Floor    @relation(fields: [floorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  occupied   Boolean
  ipd        Ipd?     @relation(fields: [ipdId], references: [id], onUpdate: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  floorId    Int
  ipdId      Int?
  extra      Json?

  @@unique([floorId, bed_name])
}

model Charges {
  id         Int      @id @default(autoincrement())
  name       String
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?

  @@unique([name])
}

model LabCharges {
  id         Int      @id @default(autoincrement())
  name       String
  amount     Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?

  @@unique([name])
}

model Operation {
  id         Int      @id @default(autoincrement())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?

  @@unique([name])
}

model DoctorFee {
  id         Int      @id @default(autoincrement())
  type       String
  amount     Float
  did        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model Distributer {
  id                Int                @id @default(autoincrement())
  name              String
  phoneNo           String
  gstNo             String?
  dlNo              String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  purchase_medicine PurchaseMedicine[]
  extra             Json?

  @@unique([name])
}

model Manufacturer {
  id         Int       @id @default(autoincrement())
  name       String
  Product    Product[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  extra      Json?

  @@unique([name])
}

model Composition {
  id                   Int                    @id @default(autoincrement())
  name                 String
  created_at           DateTime               @default(now())
  updated_at           DateTime               @updatedAt
  ProductToComposition ProductToComposition[]
  extra                Json?

  @@unique([name])
}

model ProductToComposition {
  id            Int         @id @default(autoincrement())
  cid           Composition @relation(fields: [compositionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  compositionId Int
  pid           Product     @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId     Int

  @@unique([compositionId, productId])
}

model Product {
  id                           Int                            @id @default(autoincrement())
  name                         String
  code_name                    String?
  mid                          Manufacturer                   @relation(fields: [manufacturerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  manufacturerId               Int
  created_at                   DateTime                       @default(now())
  updated_at                   DateTime                       @updatedAt
  Medicine                     Medicine[]
  ProductToComposition         ProductToComposition[]
  ManufacturerPurchaseMedicine ManufacturerPurchaseMedicine[]
  extra                        Json?
}

model HomoMedicine {
  id      Int    @id @default(autoincrement())
  name    String
  no      String
  potency String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model PurchaseMedicine {
  id                      Int                       @id @default(autoincrement())
  invoiceNo               String
  did                     Distributer               @relation(fields: [distributerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  distributerId           Int
  date                    DateTime
  medicine                Json
  return                  Json?
  total                   Float
  discount                Float
  sgst                    Float
  cgst                    Float
  grand_total             Float
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  PaymentPurchaseMEdicine PaymentPurchaseMedicine[]
  extra                   Json?

  @@unique([invoiceNo])
}

model ReturnExpiryMedicine {
  id            Int      @id @default(autoincrement())
  distributerId Int
  medicine      Json
  return_med    Boolean
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  extra         Json?
}

model PaymentPurchaseMedicine {
  id                 Int              @id @default(autoincrement())
  purchaseMedicine   PurchaseMedicine @relation(fields: [purchaseMedicineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  purchaseMedicineId Int
  total              Float
  balance            Float
  paid               Float
  method             String
  remark             String
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  extra              Json?

  @@unique([purchaseMedicineId])
}

model Medicine {
  id              Int               @id @default(autoincrement())
  quantity        Int
  pid             Product           @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId       Int
  batch           String
  exp             DateTime
  mrp             Float
  sgst            Float
  cgst            Float
  discount        Float
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  extra           Json?
  IpdPrescription IpdPrescription[]

  @@unique([productId, batch])
}

model ManufacturerPurchaseMedicine {
  id         Int      @id @default(autoincrement())
  pid        Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int
  batch      String
  paid_qty   Int
  free_qty   Int
  pack       Int
  exp        DateTime
  mrp        Float
  rate       Float
  dis        Float
  sgst       Float
  cgst       Float
  amount     Float
  net_amount Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  extra      Json?
}

model BirthCertificate {
  id         Int      @id @default(autoincrement())
  name       String
  birth_date DateTime
  weight     Float?
  type       Int
  extra      Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SaleMedicine {
  id            Int      @id @default(autoincrement())
  billNo        String
  date          DateTime
  medicine      Json
  homo_medicine Json?
  total         Float
  discount      Float
  sgst          Float
  cgst          Float
  grand_total   Float
  patient       Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  patientId     Int
  doctor_name   String
  extra         Json?
}

model ReturnMedicine {
  id          Int      @id @default(autoincrement())
  date        DateTime
  medicine    Json
  total       Float
  discount    Float
  sgst        Float
  cgst        Float
  grand_total Float
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  patientId   Int
  extra       Json?
}

model User {
  id                  Int         @id @default(autoincrement())
  name                String?
  email               String      @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  roles               String
  DoctorFee           DoctorFee[]
  permissions         Json?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  extra               Json?
}
